namespace LeetCodeProblems.Tests;

public class ValidSudokuTests
{
    public static IEnumerable<object[]> GetNumbers()
    {
        yield return new object[] { new char[][]
        {
            ['1','2','3','4','5','6','7','8','9'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
        }, true };
        yield return new object[] { new char[][]
        {
            ['1','.','.','.','.','.','.','.','.'],
            ['2','.','.','.','.','.','.','.','.'],
            ['3','.','.','.','.','.','.','.','.'],
            ['4','.','.','.','.','.','.','.','.'],
            ['5','.','.','.','.','.','.','.','.'],
            ['6','.','.','.','.','.','.','.','.'],
            ['7','.','.','.','.','.','.','.','.'],
            ['8','.','.','.','.','.','.','.','.'],
            ['9','.','.','.','.','.','.','.','.'],
        }, true };
        yield return new object[] { new char[][]
        {
            ['1','2','3','.','.','.','.','.','.'],
            ['4','5','6','.','.','.','.','.','.'],
            ['7','8','9','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
        }, true };
        yield return new object[] { new char[][]
        {
            ['1','.','.','.','.','.','.','.','1'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
        }, false };
        yield return new object[] { new char[][]
        {
            ['1','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['1','.','.','.','.','.','.','.','.'],
        }, false };
        yield return new object[] { new char[][]
        {
            ['1','.','.','.','.','.','.','.','.'],
            ['.','1','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
            ['.','.','.','.','.','.','.','.','.'],
        }, false };
        yield return new object[] { new char[][]
        {
            ['5','3','.','.','7','.','.','.','.'],
            ['6','.','.','1','9','5','.','.','.'],
            ['.','9','8','.','.','.','.','6','.'],
            ['8','.','.','.','6','.','.','.','3'],
            ['4','.','.','8','.','3','.','.','1'],
            ['7','.','.','.','2','.','.','.','6'],
            ['.','6','.','.','.','.','2','8','.'],
            ['.','.','.','4','1','9','.','.','5'],
            ['.','.','.','.','8','.','.','7','9'],
        }, true };
        yield return new object[] { new char[][]
        {
            ['8','3','.','.','7','.','.','.','.'],
            ['6','.','.','1','9','5','.','.','.'],
            ['.','9','8','.','.','.','.','6','.'],
            ['8','.','.','.','6','.','.','.','3'],
            ['4','.','.','8','.','3','.','.','1'],
            ['7','.','.','.','2','.','.','.','6'],
            ['.','6','.','.','.','.','2','8','.'],
            ['.','.','.','4','1','9','.','.','5'],
            ['.','.','.','.','8','.','.','7','9'],
        }, false };
    }

    [Theory]
    [MemberData(nameof(GetNumbers))]
    public void Test(char[][] board, bool expected)
    {
        // Given
        // When
        var actual = ValidSudoku.Solution(board);
        // Then
        Assert.Equal(expected, actual);
    }
}